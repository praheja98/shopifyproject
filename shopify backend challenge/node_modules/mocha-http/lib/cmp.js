// Generated by CoffeeScript 1.7.1
(function() {
  var isPrimitive, _;

  _ = require("underscore");

  isPrimitive = function(arg) {
    var type;
    type = typeof arg;
    return (arg == null) || (type !== "object" && type !== "function");
  };

  exports.cmp = function(obj, expected) {
    var ekeys, err, intersection, missing, okeys, unexpected;
    if (_.isEqual(obj, expected)) {
      return null;
    }
    if (isPrimitive(obj) || isPrimitive(expected)) {
      if (obj !== expected) {
        return JSON.stringify(obj) + " but expected " + JSON.stringify(expected);
      } else {
        return null;
      }
    }
    if (Array.isArray(obj)) {
      if (!Array.isArray(expected)) {
        return ["The checked object is an array, but expected " + typeof expected];
      }
      return _(obj).zip(expected).map(function(pair) {
        return exports.cmp.apply(null, pair);
      }).join("\n");
    }
    err = [];
    okeys = Object.keys(obj).sort();
    ekeys = Object.keys(expected).sort();
    unexpected = _.difference(okeys, ekeys);
    missing = _.difference(ekeys, okeys);
    intersection = _.intersection(ekeys, okeys);
    if (unexpected.length > 0) {
      err.push("Encountered the following unexpected keys: " + unexpected.join(", "));
    }
    if (missing.length > 0) {
      err.push("Missed the following keys: " + missing.join(", "));
    }
    if (!_(obj).isArray()) {
      intersection.forEach(function(key) {
        if (!_.isEqual(obj[key], expected[key])) {
          return err.push("Invalid value of '" + key + "': " + JSON.stringify(obj[key]) + " but expected " + JSON.stringify(expected[key]) + " (" + typeof obj[key] + " and " + typeof expected[key] + ")");
        }
      });
    }
    return err.join("\n");
  };

  exports.cmpcnt = function(obj, expected) {
    var ekeys, err, intersection, missing, okeys;
    if (_.isEqual(obj, expected)) {
      return null;
    }
    err = [];
    okeys = Object.keys(obj).sort();
    ekeys = Object.keys(expected).sort();
    missing = _.difference(ekeys, okeys);
    intersection = _.intersection(ekeys, okeys);
    if (missing.length > 0) {
      err.push("Missed the following keys: " + missing.join(", "));
    }
    intersection.forEach(function(key) {
      if (!_.isEqual(obj[key], expected[key])) {
        return err.push("Invalid value of '" + key + "': " + JSON.stringify(obj[key]) + " but expected " + JSON.stringify(expected[key]) + " (" + typeof obj[key] + " and " + typeof expected[key] + ")");
      }
    });
    return err.join("\n");
  };

}).call(this);
