// Generated by CoffeeScript 1.7.1
(function() {
  var Z, chai, chaiAsPromised, cmp, sinonChai,
    __slice = [].slice;

  chai = require('chai');

  chaiAsPromised = require('chai-as-promised');

  sinonChai = require('sinon-chai');

  Z = require('z-std-pack');

  cmp = require('./cmp').cmp;

  chai.use(sinonChai);

  chai.use(chaiAsPromised);

  chai.should();

  chai.use(function(_chai, utils) {
    var overrides;
    overrides = ['eql', 'equals'];
    return overrides.forEach(function(methodName) {
      return utils.overwriteMethod(chai.Assertion.prototype, methodName, function(superMethod) {
        return function(expectancy) {
          return Z(expectancy).then((function(_this) {
            return function(resolvedExpectancy) {
              var diff, obj;
              obj = utils.flag(_this, 'object');
              diff = cmp(obj, resolvedExpectancy);
              if (diff) {
                console.log("DIFF");
                console.log("----");
                console.log(diff);
              }
              return superMethod.call(_this, resolvedExpectancy);
            };
          })(this));
        };
      });
    });
  });

  exports.Z = Z;

  exports.createMethods = function(met, methods) {
    var converter, pMet;
    if (methods == null) {
      methods = ['get', 'post', 'put', 'del', 'head', 'trace', 'options', 'connect', 'patch'];
    }
    pMet = Z.bindAsync(met);
    converter = function(who, isLowLevel, blockers) {
      var res;
      res = {
        as: function(who) {
          return converter(who, isLowLevel, blockers);
        },
        lowlevel: function() {
          return converter(who, true, blockers);
        },
        highlevel: function() {
          return converter(who, false, blockers);
        }
      };
      methods.forEach(function(method) {
        return res[method] = function(path, body, headers) {
          return Z(blockers).then(function() {
            return pMet({
              method: method,
              path: path,
              isLowLevel: isLowLevel,
              headers: headers,
              who: who,
              body: body
            });
          });
        };
      });
      return res;
    };
    return {
      req: converter(null, false, []),
      after: function() {
        var blockers;
        blockers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return converter(null, false, blockers);
      }
    };
  };

}).call(this);
